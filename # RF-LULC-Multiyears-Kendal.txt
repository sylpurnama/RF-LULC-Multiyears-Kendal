# RF-LULC-Multiyears-Kendal
//ROI
var countries = ee.FeatureCollection("users/sylmuflichin/kendal")
var geometry = countries.filter(ee.Filter.eq('WA', 'KAB. KENDAL'));
Map.addLayer(geometry, {}, 'KAB. KENDALâ€™, false');
Map.centerObject(geometry,11); 

var s2 = ee.ImageCollection("COPERNICUS/S2_SR")

// List of year of image to use
var yearList = [2019, 2020, 2021, 2022];

// Create an image per year 
var imageList = yearList.map(function(year){
  var startDate = ee.Date.fromYMD(year, 1, 1);
  var endDate = ee.Date.fromYMD(year, 12, 31);
  
  // Generate image median
  var image = s2.filterBounds(geometry)
    .filterDate(startDate, endDate)
    .map(cloudMask)
    .median()
    .clip(geometry);
    
  // Show the image
  Map.addLayer(image, { min: [250, 100, 0], max: [4000, 3000, 2000], bands: ['B8', 'B11', 'B2'] }, 'Image_' + year);
  Map.centerObject (geometry, 10);
  
  // Return the new image to the list
  return { year: year, image: image };
});

// Get the 2022 image to built the rf model
var image2022 = imageList.filter(function(dict){
  return dict.year == 2022;
})[0].image;

// Merge the samples
var sample = Ladang.merge(Tanaman_Campuran).merge(Permukiman).merge(Perkebunan_Campuran).merge(Semak).merge(Perkebunan)
  .merge(Sawah_Irigasi).merge(Sawah_Pasang_Surut).merge(Air).merge(Tambak).merge(Lahan_Terbuka).merge(Bangunan_Industri).merge(Hutan_lahan_kering)
  .randomColumn();

// Split into train and test
var train = sample.filter(ee.Filter.lte('random', 0.8));
var test = sample.filter(ee.Filter.gt('random', 0.8));

// Extract image values
var trainSample = image2022.sampleRegions({
  collection: train,
  scale: 50,
  properties: ['class'],
});
var testSample = image2022.sampleRegions({
  collection: test,
  scale: 50,
  properties: ['class'],
});

// Train rf model
var model = ee.Classifier.smileRandomForest(50).train(trainSample, 'class', image2022.bandNames());

// Accuracy test
var cm = testSample.classify(model, 'predict').errorMatrix('class', 'predict');
print('Confusion matrix', cm, 'Accuracy', cm.accuracy(), 'Kappa', cm.kappa());

// Legend dict
var legend = {
  'LULC_class_values': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
  'LULC_class_palette': ['808000', '32CD32', 'FF8C00', 'DCDCDC', '90EE90', '20B2AA', 'FFFF00', '2E8B57', '0000CD', '87CEFA', 'FFE4C4', 'F0FFFF', '800000']
};

// Classify all the image
imageList.map(function(dict){
  var year = dict.year;
  var image = dict.image;
  
  // Classify image
  var lulc = image.classify(model, 'LULC').toByte().set(legend); // Set the legend for vis
  
  // Show the result
  Map.addLayer(lulc, {}, 'LULC_' + year);
  
  // Export classification
  Export.image.toDrive({
    image: lulc,
    scale: 10,
    region: geometry,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    folder: 'LULC',
    description: 'LULC_' + year,
    formatOptions: {
      cloudOptimized: true
    }
  });
});

// Cloud masking function
function cloudMask(image){
  var scl = image.select('SCL');
  var mask = scl.eq(3).or(scl.gt(7).and(scl.lte(10))).eq(0);
  return image.select(['B2', 'B3', 'B4', 'B8', 'B11']).updateMask(mask);
}
